import axios from "axios";
import React from "react";
import Input from "../components/input/Input";
import Radio from "../components/radio/Radio";
import { handlerAPIPost } from "../services/HandlerService";
import Swal from "sweetalert2";
import { useForm, SubmitHandler } from "react-hook-form";
import * as yup from "yup";
import { yupResolver } from "@hookform/resolvers/yup";
import { toast } from "react-toastify";
import { useNavigate } from "react-router-dom";
import InputPassword from "../components/input/InputPassword";
type valueType = {
  username: string;
  email: string;
  password: string;
  role: string;
};
const SignUpPage = () => {
  const navigate = useNavigate();
  const schema = yup
    .object({
      username: yup.string().required("Vui l√≤ng nh·∫≠p v√†o t√™n"),
      email: yup
        .string()
        .email("Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng")
        .required("Vui l√≤ng nh·∫≠p v√†o ƒë·ªãa ch·ªâ email"),
      password: yup.string().required("Vui l√≤ng nh·∫≠p v√†o m·∫≠t kh·∫©u"),
      confirmPassword: yup
        .string()
        .required("Vui l√≤ng nh·∫≠p l·∫°i m·∫≠t kh·∫©u")
        .oneOf([yup.ref("password"), null], "Nh·∫≠p m·∫≠t kh·∫©u ch∆∞a kh·ªõp"),
    })
    .required();
  const resolver = yupResolver(schema);
  const {
    control,
    handleSubmit,

    formState: { errors, isValid },
  } = useForm({
    defaultValues: {
      username: "",
      email: "",
      password: "",
      confirmPassword: "",
      role_name: 1,
    },
    resolver: resolver,
  });

  const handlerSubmitFrom = async (values: any) => {
    try {
      console.log("üöÄ ~ file: SignUpPage.tsx:35 ~ SignUpPage ~ errors", errors);
      const data = {
        username: values.username,
        email: values.email,
        password: values.password,
        role: values.role,
      };
      const result = await handlerAPIPost(
        "https://stroreapp-be.herokuapp.com/api/auth/createAccount",
        data
      );
      if (result) {
        navigate("/signin");
        toast.success("ƒêƒÉng k√Ω th√†nh c√¥ng", {
          pauseOnHover: false,
          delay: 0,
          autoClose: 1500,
        });
        setTimeout(() => {
          window.location.reload();
        }, 1300);
      }
    } catch (error) {
      navigate("/signup");
      toast.error("ƒêƒÉng k√Ω th·∫•t b·∫°i", {
        pauseOnHover: false,
        delay: 0,
        autoClose: 1500,
      });
      setTimeout(() => {
        window.location.reload();
      }, 1300);
    }
  };
  return (
    <div className="pb-[30px]">
      <div className="text-[14px] px-[30px] py-[4px] bg-[#f6f6f6]">
        <span className="text-[#999999]">
          <a href="/" className="mr-[5px] text-[#2f80ed]">
            Trang ch·ªß
          </a>
          /
        </span>
        <span className="ml-[5px] text-[#999999]">ƒêƒÉng k√Ω</span>
      </div>
      <div className="mt-[20px] text-center">
        <div className="mb-[10px]">
          <h1 className="uppercase text-[25px] ">ƒëƒÉng k√Ω t√†i kho·∫£n</h1>
          <div>
            <span>B·∫°n ƒë√£ c√≥ t√†i kho·∫£n? ƒêƒÉng nh·∫≠p </span>
            <a href="/signin" className="text-[#2f80ed] underline">
              t·∫°i ƒë√¢y
            </a>
          </div>
        </div>
        <div className="text-center  inline-block ">
          <form autoComplete="off" onSubmit={handleSubmit(handlerSubmitFrom)}>
            <div>
              <Input
                control={control}
                name="username"
                type="text"
                placeholder="Vui l√≤ng nh·∫≠p t√™n"
              >
                T√™n
              </Input>
              {errors?.username?.message &&
                typeof errors.username.message === "string" && (
                  <div className="mt-[-10px] font-semibold text-[14px] text-left text-red-700 ">
                    {errors.username.message}
                  </div>
                )}
            </div>
            <div>
              <Input
                control={control}
                name="email"
                type="email"
                placeholder="Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ Email"
              >
                Email
              </Input>
              {errors?.email?.message &&
                typeof errors.email.message === "string" && (
                  <div className="mt-[-10px] font-semibold text-[14px] text-left text-red-700 ">
                    {errors.email.message}
                  </div>
                )}
            </div>
            <div>
              <InputPassword
                control={control}
                name="password"
                placeholder="Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u"
              >
                M·∫≠t kh·∫©u
              </InputPassword>
              {errors?.password?.message &&
                typeof errors.password.message === "string" && (
                  <div className="mt-[-10px] font-semibold text-[14px] text-left text-red-700 ">
                    {errors.password.message}
                  </div>
                )}
            </div>
            <div>
              <InputPassword
                control={control}
                name="confirmPassword"
                placeholder="Vui l√≤ng nh·∫≠p l·∫°i m·∫≠t kh·∫©u"
              >
                Nh·∫≠p l·∫°i m·∫≠t kh·∫©u
              </InputPassword>
              {errors?.confirmPassword?.message &&
                typeof errors.confirmPassword.message === "string" && (
                  <div className="mt-[-10px] font-semibold text-[14px] text-left text-red-700 ">
                    {errors.confirmPassword.message}
                  </div>
                )}
            </div>
            <div className="flex items-center gap-x-[30px]">
              <Radio control={control} name="role" value="manage">
                Qu·∫£n l√Ω
              </Radio>
              <Radio control={control} name="role" value="user">
                Ng∆∞·ªùi d√πng
              </Radio>
            </div>
            <button
              type="submit"
              className="w-full bg-[#080808] rounded-lg text-[18px] font-semibold text-white py-[10px] mt-[10px]"
            >
              ƒêƒÉng K√Ω
            </button>
          </form>
        </div>
      </div>
    </div>
  );
};

export default SignUpPage;
